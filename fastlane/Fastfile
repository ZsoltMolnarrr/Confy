# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  podspec_path = "./Confy.podspec"

  lane :release do |options|
    version = options.fetch(:version, "undefined")
    if version == "undefined"
      UI.user_error!("Missing version number, append ` version:X.Y.Z`")
    end

    podspec_version = version_get_podspec(path: podspec_path)
    if podspec_version == version
      UI.user_error!("Given version matches with current one")
    end

    if !ENV["CONFY_RELEASE_TOKEN"]
      UI.user_error!("Missing CONFY_RELEASE_TOKEN from shell environment")
    end

    last_version_tag = last_git_tag
    changelog = changelog_from_git_commits(
      between: [last_version_tag, "HEAD"],
      pretty: "- %s",
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
    )
    pod_lib_lint
    version_bump_podspec(path: podspec_path, version_number: version)
    git_commit(path: podspec_path, message: "Version Bump")
    push_to_git_remote
    git_tag tag:version
    pod_push(path: podspec_path)
    github_release = set_github_release(
      repository_name: "ZsoltMolnarrr/Confy",
      api_token: ENV["CONFY_RELEASE_TOKEN"],
      name: "New release",
      tag_name: version,
      description: changelog,
      commitish: "main",
      upload_assets: []
    )
  end

  private_lane :git_tag do |options|
    tag = options.fetch(:tag)
    sh("cd ..
        git fetch --all --tags --force
        ", log:true)
    if git_tag_exists(tag: tag, remote:true)
        sh("cd ..
            git tag -d #{tag}
            git push --delete origin #{tag}
            ", log:true)
    end
    sh("cd ..
        git tag #{tag}
        git push origin #{tag}
        ", log:true)
  end
end
